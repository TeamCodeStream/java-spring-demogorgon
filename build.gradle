import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlin_version = '2.0.20'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id "de.undercouch.download" version "5.3.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'

group = 'org.springframework.samples'
version = '1.0.0'

kotlin {
    jvmToolchain(17)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.micrometer:micrometer-core:1.13.5'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.cache:cache-api'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    implementation 'com.newrelic.agent.java:newrelic-api:8.15.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    runtimeOnly 'com.h2database:h2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

bootRun {
    dependsOn 'buildReact','moveFrontEnd','build'
    mustRunAfter 'buildReact','moveFrontEnd','build'

    jvmArgs = ["-javaagent:${projectDir}/newrelic/newrelic.jar"]
}

tasks.register('buildReact', Exec){
    String cmd = 'npm';
    if (Os.isFamily(Os.FAMILY_WINDOWS)){
        cmd = "npm.cmd";
    }

    workingDir 'client/'
    commandLine cmd, 'run', 'build'
}

tasks.register("moveFrontEnd", Copy){
    dependsOn 'buildReact'
    mustRunAfter 'buildReact'

    doFirst {
        delete 'src/main/resources/static/resources/react'
    }

    andThen {
        mkdir 'src/main/resources/static/resources/react'
    }

    doLast {
        from "client/dist"
        into "src/main/resources/static/resources/react"
    }
}

tasks.register('downloadNewRelicAgent', Download) {
    mkdir 'newrelic'
    src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
    dest file('newrelic')
}

tasks.register('unzipNewRelicAgent', Copy) {
    dependsOn 'downloadNewRelicAgent'
    mustRunAfter 'downloadNewRelicAgent'

    from zipTree(file('newrelic/newrelic-java.zip'))
    into rootDir
    exclude("newrelic/newrelic.yml")

    doLast {
        delete("newrelic/LICENSE")
        delete("newrelic/newrelic-java.zip")
        delete("newrelic/THIRD_PARTY_NOTICES.md")
        delete("newrelic/extension-example.xml")
        delete("newrelic/newrelic-api.jar")
        delete("newrelic/newrelic-api-javadoc.jar")
        delete("newrelic/newrelic-api-sources.jar")
    }
}
