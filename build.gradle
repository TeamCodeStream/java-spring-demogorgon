import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlin_version = '2.0.20'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

apply plugin: 'java'
apply plugin: 'kotlin'

ext {
    newrelic_version = '8.15.0'
}

group = 'org.springframework.samples'
version = '1.0.0'

kotlin {
    jvmToolchain(17)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.cache:cache-api'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.newrelic.agent.java:newrelic-api:$newrelic_version"

    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    runtimeOnly 'com.h2database:h2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

bootRun {
    dependsOn 'downloadNewRelicAgent','buildFrontEnd','build'
    mustRunAfter 'downloadNewRelicAgent','buildFrontEnd','build'

    jvmArgs = ["-javaagent:${projectDir}/newrelic/newrelic-v${newrelic_version}.jar"]
}

tasks.register('buildFrontEnd', DefaultTask){
    doFirst {
        exec {
            String cmd = 'npm';
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                cmd = "npm.cmd";
            }

            workingDir 'client/'
            commandLine cmd, 'run', 'build'
        }
    }

    doLast {
        delete 'src/main/resources/static/resources/react'
        mkdir 'src/main/resources/static/resources/react'

        copy {
            from "client/dist"
            into "src/main/resources/static/resources/react"
        }
    }
}

tasks.register('downloadNewRelicAgent', DefaultTask) {
    onlyIf {
        def agentExists = file("newrelic/newrelic-v${newrelic_version}.jar").exists()
        def agentDoesNotExist = !agentExists

        if(agentDoesNotExist){
            println "Downloading New Relic Java Agent v${newrelic_version}..."
        } else {
            println "Found Local Java Agent v${newrelic_version}; Skipping Task (delete newrelic.jar to force the download again)"
        }

        return agentDoesNotExist
    }

    doFirst {
        mkdir 'newrelic'
        def fileUrl = "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java-${newrelic_version}.zip"
        def destinationFile = file("$rootDir/newrelic/newrelic.zip")

        new URL(fileUrl).withInputStream { inputStream ->
            destinationFile.withOutputStream { outputStream ->
                outputStream << inputStream
            }
        }
    }

    doLast {
        copy {
            from zipTree(file('newrelic/newrelic.zip'))
            into rootDir
            exclude("newrelic/newrelic.yml")
            exclude("newrelic/LICENSE")
            exclude("newrelic/THIRD_PARTY_NOTICES.md")
            exclude("newrelic/extension-example.xml")
            exclude("newrelic/newrelic-api.jar")
            exclude("newrelic/newrelic-api-javadoc.jar")
            exclude("newrelic/newrelic-api-sources.jar")
        }

        file("newrelic/newrelic.jar").renameTo("newrelic/newrelic-v${newrelic_version}.jar")

        delete("newrelic/newrelic.zip")
    }
}
